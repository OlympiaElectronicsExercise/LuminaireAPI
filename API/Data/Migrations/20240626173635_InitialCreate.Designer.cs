// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Data.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240626173635_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.6");

            modelBuilder.Entity("API.Models.LuminareModel", b =>
                {
                    b.Property<int>("UID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("Address")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Autonomy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte>("BatteryCapacityFault")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("BatteryCharging")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("BatteryCutOffStatus")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("BatteryFault")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("BatteryTestRunning")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BatteryVoltage")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ChargeCurrent")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte>("ChargerFault")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("DimmingLevel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte>("FullyCharged")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("HasWrongLuminaireType")
                        .HasColumnType("INTEGER");

                    b.Property<long>("HopCounter")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("InForcedEmergency")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LampCurrent")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte>("LampFault")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("LampTestMade")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("LampTestRunning")
                        .HasColumnType("INTEGER");

                    b.Property<long>("LatencyCounter")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LuminaryModel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte>("MainsFault")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Maintained")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MessageCounter")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ModuleType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModuleVersion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("NetworkLevel")
                        .HasColumnType("INTEGER");

                    b.Property<long>("NetworkidToGo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Rc1181fwVersion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte>("ResolvedSpiCommError")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Rfchannel")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RfchannelToGo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Rssi")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RssiWithUnit")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("SidToGo")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("SpiCommError")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TimeToSend")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Zone")
                        .HasColumnType("INTEGER");

                    b.HasKey("UID");

                    b.HasIndex("Address")
                        .IsUnique();

                    b.ToTable("Luminaires");
                });

            modelBuilder.Entity("API.Models.RoleModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("API.Models.UserModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("API.Models.UserRoleModel", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("API.Models.UserRoleModel", b =>
                {
                    b.HasOne("API.Models.RoleModel", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("API.Models.RoleModel", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("API.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("API.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("API.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
